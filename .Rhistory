## Does the addition of seasonality of day of the week adds predictive power?
lm.fit.seastr.1 = lm(Volume.tr~month)
lm.fit.seastr.2 = lm(Volume.tr~month+week)
## Does the addition of seasonality of day of the week adds predictive power?
lm.fit.seastr.1 = lm(Volume.tr~month)
lm.fit.seastr.2 = lm(Volume.tr~month+week)
anova(lm.fit.seastr.1,lm.fit.seastr.2)
vol.fit.lm.seastr.2 = fitted(lm.fit.seastr.2)
## Compare with & without trend
ggplot(edvoldata, aes(dates, vol.fit.gam.seastr.2)) + geom_line() + xlab("Time") + ylab("Seasonality and Trend: Daily ED Volume") +
geom_line(dates,vol.fit.lm.seastr.2,lwd=2,col="blue") +
geom_line(dates,vol.fit.gam,lwd=2,col="red")
## Does the addition of seasonality of day of the week adds predictive power?
lm.fit.seastr.1 = lm(Volume.tr~month)
lm.fit.seastr.2 = lm(Volume.tr~month+week)
anova(lm.fit.seastr.1, lm.fit.seastr.2)
vol.fit.lm.seastr.2 = fitted(lm.fit.seastr.2)
## Compare with & without trend
ggplot(edvoldata, aes(dates, vol.fit.gam.seastr.2)) + geom_line() + xlab("Time") + ylab("Seasonality and Trend: Daily ED Volume") +
geom_line(dates,vol.fit.lm.seastr.2,lwd=2,col="blue") +
geom_line(dates,vol.fit.gam,lwd=2,col="red")
## Compare with & without trend
ggplot(edvoldata, aes(dates, vol.fit.gam.seastr.2)) + geom_line() + xlab("Time") + ylab("Seasonality and Trend: Daily ED Volume") +
geom_line(aes(dates, vol.fit.lm.seastr.2), lwd=2, col="blue") +
geom_line(aes(dates, vol.fit.gam), lwd=2, col="red")
################## STATIONARITY: RESIDUAL PROCESS ####################
## Residual Process: Trend Removal
resid.1 = Volume.tr-vol.fit.gam
## Residual Process: Stationarity Removal
resid.2 = Volume.tr-vol.fit.lm.seastr.2
## Residual Process: Trend & Stationarity Removal
resid.3 = Volume.tr-vol.fit.gam.seastr.2
y.min = min(c(resid.1,resid.2,resid.3))
y.max = max(c(resid.1,resid.2,resid.3))
################## STATIONARITY: RESIDUAL PROCESS ####################
## Residual Process: Trend Removal
resid.1 = Volume.tr-vol.fit.gam
## Residual Process: Stationarity Removal
resid.2 = Volume.tr-vol.fit.lm.seastr.2
## Residual Process: Trend & Stationarity Removal
resid.3 = Volume.tr-vol.fit.gam.seastr.2
y.min = min(c(resid.1,resid.2,resid.3))
y.max = max(c(resid.1,resid.2,resid.3))
ggplot(edvoldata, aes(dates, resid.1),ymin=y.min,ymax=y.max) + geom_line() + xlab("Time") + ylab("Residual Process") +
geom_line(dates,resid.2,col="blue") +
geom_line(dates,resid.3,col="brown")
ggplot(edvoldata, aes(dates, resid.1),ymin=y.min,ymax=y.max) + geom_line() + xlab("Time") + ylab("Residual Process") +
geom_line(aes(dates,resid.2),col="blue") +
geom_line(aes(dates,resid.3),col="brown")
################## STATIONARITY: RESIDUAL PROCESS ####################
## Residual Process: Trend Removal
resid.1 = Volume.tr-vol.fit.gam
## Residual Process: Stationarity Removal
resid.2 = Volume.tr-vol.fit.lm.seastr.2
## Residual Process: Trend & Stationarity Removal
resid.3 = Volume.tr-vol.fit.gam.seastr.2
y.min = min(c(resid.1,resid.2,resid.3))
y.max = max(c(resid.1,resid.2,resid.3))
ggplot(edvoldata, aes(dates, resid.1),ymin=y.min,ymax=y.max) + geom_line() + xlab("Time") + ylab("Residual Process") +
geom_line(aes(dates,resid.2),col="blue") +
geom_line(aes(dates,resid.3),col="brown")
legend(2012,-3.5,legend=c("Trend","Season","Trend+Season"),lty = 1, col=c("black","blue","brown"))
acf(resid.1,lag.max=12*4,main="")
acf(resid.1,lag.max=12*4,main="")
acf(resid.2,lag.max=12*4,main="",col="blue")
acf(resid.3,lag.max=12*4,main="",col="brown")
acf(resid.1,lag.max=12*4,main="")
acf(resid.2,lag.max=12*4,main="",col="blue")
acf(resid.3,lag.max=12*4,main="",col="brown")
################## STATIONARITY: RESIDUAL PROCESS ####################
## Residual Process: Trend Removal
resid.1 = Volume.tr-vol.fit.gam
## Residual Process: Stationarity Removal
resid.2 = Volume.tr-vol.fit.lm.seastr.2
## Residual Process: Trend & Stationarity Removal
resid.3 = Volume.tr-vol.fit.gam.seastr.2
y.min = min(c(resid.1,resid.2,resid.3))
y.max = max(c(resid.1,resid.2,resid.3))
ggplot(edvoldata, aes(dates, resid.1),ymin=y.min,ymax=y.max) + geom_line() + xlab("Time") + ylab("Residual Process") +
geom_line(aes(dates,resid.2),col="blue") +
geom_line(aes(dates,resid.3),col="brown")
#legend(2012,-3.5,legend=c("Trend","Season","Trend+Season"),lty = 1, col=c("black","blue","brown"))
acf(resid.1,lag.max=12*4,main="")
acf(resid.2,lag.max=12*4,main="",col="blue")
acf(resid.3,lag.max=12*4,main="",col="brown")
acf(resid.1,lag.max=12*4,main="")
acf(resid.2,lag.max=12*4,main="",col="blue")
acf(resid.3,lag.max=12*4,main="",col="brown")
install.packages("ProbBayes")
classroom <- read.csv("http://www-personal.umich.edu/~bwest/classroom.csv")
View(classroom)
?arrange
classroom <- arrange(classroom, classid, schoolid)
classroom <- read.csv("http://www-personal.umich.edu/~bwest/classroom.csv")
View(classroom)
classroom <- arrange(classroom, classid, schoolid)
schoolLookupVec <- unique(classroom[c("classid","schoolid")])[,"schoolid"]
View(schoolLookupVec)
schoolLookupVec
unique(classroom[c("classid","schoolid")])
classroom[c("classid","schoolid")]
View(classroom[c("classid","schoolid")])
View(unique(classroom[c("classid","schoolid")]))
View(unique(classroom[c("classid","schoolid")])[, "schoolid"])
unique(classroom[c("classid","schoolid")])[, "schoolid"]
schoolLookupVec
dat <- with(classroom,
list(Ni           = length(unique(childid)),
Nj           = length(unique(classid)),
Nk           = length(unique(schoolid)),
classid      = classid,
schoolid     = schoolid,
schoolLookup = schoolLookupVec,
mathgain     = mathgain))
dat
View(dat)
pwd()
getwd()
setwd("C:/Users/User/Desktop")
fileName <- "./multilevel3.stan"
stan_code <- readChar(fileName, file.info(fileName)$size)
cat(stan_code)
library(rstan)
fileName <- "./multilevel3.stan"
stan_code <- readChar(fileName, file.info(fileName)$size)
cat(stan_code)
data <-haven::read_dta("11.2.dta")
View(data)
library(cmdstanr)
?install_cmdstan()
detach("package:cmdstanr", unload = TRUE)
library(cmdstanr)
install_cmdstan()
library(cmdstanr)
library(cmdstanr)
cmdstan_make_local()
install_cmdstan()
stan_file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(stan_file)
mod$print()
mod$stan_file()
mod$exe_file()
mod <- cmdstan_model(stan_file)
mod <- cmdstan_model(
stan_file,
force_recompile = TRUE,
include_paths = "paths/to/directories/with/included/files",
cpp_options = list(stan_threads = TRUE, STANC2 = TRUE)
)
mod <- cmdstan_model(
stan_file,
force_recompile = TRUE,
include_paths = "paths/to/directories/with/included/files",
cpp_options = list(stan_threads = TRUE, STANC2 = TRUE)
)
cmdstan_path()
cmdstan_version()
cmdstan_make_local(cpp_options = cpp_options)
cpp_options <- list(
"CXX" = "clang++",
"CXXFLAGS+= -march-native",
PRECOMPILED_HEADERS = TRUE
)
cmdstan_make_local(cpp_options = cpp_options)
rebuild_cmdstan()
install_cmdstan()
install_cmdstan(overwrite = T)
cmdstan_version()
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 2,
refresh = 500
)
install.packages(c("bayestestR", "fitdistrplus", "gitcreds", "ISOcodes", "loo", "mlr3data", "mlr3proba", "ompr", "paradox", "processx", "ps", "slam", "tseries", "wbstats"))
install.packages(c("backports", "BaM", "broom", "colourvalues", "config", "data.table", "Deriv", "distr6", "FactoMineR", "fda", "flexpolyline", "foreign", "fpc", "future", "geepack", "gghighlight", "ggrepel", "ggstance", "googlePolylines", "here", "htmlwidgets", "hunspell", "insight", "jsonlite", "KFAS", "loo", "MatchIt", "Matrix", "mlr3", "mlr3db", "mlr3learners", "mlr3pipelines", "mlr3tuning", "nlme", "parallelly", "partykit", "patchwork", "pbdZMQ", "pbkrtest", "pkgbuild", "plotly", "psych", "quantmod", "r2d3", "RcppEigen", "rmarkdown", "RMySQL", "servr", "sparklyr", "StanHeaders", "stopwords", "testthat", "tinytest", "tinytex", "torch", "usethis", "vctrs", "xaringan", "Zelig"))
install.packages(c("backports", "BaM", "broom", "colourvalues", "config", "data.table", "Deriv", "distr6", "FactoMineR", "fda", "flexpolyline", "foreign", "fpc", "future", "geepack", "gghighlight", "ggrepel", "ggstance", "googlePolylines", "here", "htmlwidgets", "hunspell", "insight", "jsonlite", "KFAS", "loo", "MatchIt", "Matrix", "mlr3", "mlr3db", "mlr3learners", "mlr3pipelines", "mlr3tuning", "nlme", "parallelly", "partykit", "patchwork", "pbdZMQ", "pbkrtest", "pkgbuild", "plotly", "psych", "quantmod", "r2d3", "RcppEigen", "rmarkdown", "RMySQL", "servr", "sparklyr", "StanHeaders", "stopwords", "testthat", "tinytest", "tinytex", "torch", "usethis", "vctrs", "xaringan", "Zelig"))
install.packages(c("backports", "BaM", "broom", "colourvalues", "config", "data.table", "Deriv", "distr6", "FactoMineR", "fda", "flexpolyline", "foreign", "fpc", "future", "geepack", "gghighlight", "ggrepel", "ggstance", "googlePolylines", "here", "htmlwidgets", "hunspell", "insight", "jsonlite", "KFAS", "loo", "MatchIt", "Matrix", "mlr3", "mlr3db", "mlr3learners", "mlr3pipelines", "mlr3tuning", "nlme", "parallelly", "partykit", "patchwork", "pbdZMQ", "pbkrtest", "pkgbuild", "plotly", "psych", "quantmod", "r2d3", "RcppEigen", "rmarkdown", "RMySQL", "servr", "sparklyr", "StanHeaders", "stopwords", "testthat", "tinytest", "tinytex", "torch", "usethis", "vctrs", "xaringan", "Zelig"))
install.packages("Matrix")
install.packages("Matrix")
library(tidymodels)
library(tidyverse)
employee <- read_rds(url('https://gmudatamining.com/data/employee_data.rds'))
str(employee)
empployee_df <- employee %>%
select(left_company, job_level, salary, weekly_hours, miles_from_home) %>%
mutate(employee_id = row_number()) %>%
relocate(employee_id, .before = left_company)
employee_df <- employee %>%
select(left_company, job_level, salary, weekly_hours, miles_from_home) %>%
mutate(employee_id = row_number()) %>%
relocate(employee_id, .before = left_company)
employee_df
View(employee_df)
set.seed(314)
employee_split <- initial_split(employee_df, prop = 0.75, strata = left_company)
employee_split
empployee_training <- employee_split %>%
training()
empployee_training <- employee_split %>%
training()
employee_training <- employee_split %>%
training()
employee_training
employee_test <- employee_split %>%
testing()
employee_test
# feature engineering
recipe(left_company ~ job_level + salary + weekly_hours + miles_from_home, data = employee_training)
# feature engineering
employee_recipe <- recipe(left_company ~ job_level + salary + weekly_hours + miles_from_home, data = employee_training)
summary(employee_recipe)
install.packages(c("blogdown", "brio", "dagitty", "dplyr", "fansi", "gdtools", "ggrepel", "ggthemes", "hdrcde", "heplots", "htmltools", "IRdisplay", "KFAS", "Matrix", "MCMCpack", "mlr3", "mosaic", "parsnip", "plotrix", "Rcpp", "repr", "RPostgres", "shinyWidgets", "stars", "targets", "tibble", "timetk", "tinytex", "tmap", "tmaptools", "VIM", "xfun", "xgboost"))
install.packages(c("bayestestR", "bbotk", "billboarder", "boot", "broom", "candisc", "causact", "class", "cli", "coin", "cpp11", "crayon", "dbplyr", "dfidx", "DiceDesign", "distributional", "dplyr", "fastmap", "forcats", "furrr", "gert", "ggmcmc", "ggrepel", "htmltools", "ingredients", "inum", "knitr", "ks", "libcoin", "MASS", "mathjaxr", "Matrix", "matrixStats", "memoise", "mice", "mime", "mitml", "mlbench", "mlr3pipelines", "mlr3proba", "mlr3tuning", "mlr3verse", "mlr3viz", "modules", "multcomp", "nlme", "nnet", "opencpu", "paradox", "party", "partykit", "pbdZMQ", "PKI", "precrec", "proj4", "promises", "quantreg", "rappdirs", "Rcpp", "RcppArmadillo", "reprex", "rgdal", "RSQLite", "rstatix", "sass", "shiny", "shinyloadtest", "shinythemes", "shinyWidgets", "spatial", "stars", "stopwords", "systemfonts", "targets", "tibble", "usethis", "vroom", "waldo", "websocket", "withr", "xfun"))
install.packages(c("bayestestR", "bbotk", "billboarder", "boot", "broom", "candisc", "causact", "class", "cli", "coin", "cpp11", "crayon", "dbplyr", "dfidx", "DiceDesign", "distributional", "dplyr", "fastmap", "forcats", "furrr", "gert", "ggmcmc", "ggrepel", "htmltools", "ingredients", "inum", "knitr", "ks", "libcoin", "MASS", "mathjaxr", "Matrix", "matrixStats", "memoise", "mice", "mime", "mitml", "mlbench", "mlr3pipelines", "mlr3proba", "mlr3tuning", "mlr3verse", "mlr3viz", "modules", "multcomp", "nlme", "nnet", "opencpu", "paradox", "party", "partykit", "pbdZMQ", "PKI", "precrec", "proj4", "promises", "quantreg", "rappdirs", "Rcpp", "RcppArmadillo", "reprex", "rgdal", "RSQLite", "rstatix", "sass", "shiny", "shinyloadtest", "shinythemes", "shinyWidgets", "spatial", "stars", "stopwords", "systemfonts", "targets", "tibble", "usethis", "vroom", "waldo", "websocket", "withr", "xfun"))
?oats
??oats
data(oats, package = "MASS")
View(oats)
str(aots)
str(oats)
xtabs(~ N + V + B, data = oats)
plot.design(oats)
mean(oats$Y)
interaction.plot(oats$N, oats$V, oats$Y)
library(lmerTest)
fit.lme <- lmer(Y ~ B + V * N + (1 | B:V), data = oats)
summary(fit.lme)
anova(fit.lme)
install.packages(c("broom", "cluster", "crul", "distr6", "dtplyr", "gert", "huxtable", "insight", "kableExtra", "lifecycle", "Matrix", "mgcv", "radiant.model", "rmarkdown", "rsample", "set6", "smacof", "SparseM", "svglite", "testthat"))
setwd("C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd")
shiny::runApp()
data <- left_join(data, pob, by = "Region")
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
caca <- get_data()
caca %>% filter(Region == "O'Higgins")
caca %>% filter(Region == "O´Higgins")
View(caca)
O’Higgins
caca %>% filter(Region == "O´Higgins")
caca %>% filter(Region == "O'Higgins")
caca <- get_data()
caca %>% filter(Region == "O'Higgins")
caca %>% filter(Region == "O’Higgins")
data$Region[data$Region == "O’Higgins"]
caca$Region[caca$Region == "O’Higgins"]
caca$Region[caca$Region == "O’Higgins"] <- "O'Higgins"
caca
View(caca)
caca %>% filter(Region == "O'Higgins")
runApp()
get_data()
get_data() %>% View()
get_data() %>% filter(Region == "O´Higgins")
get_data() %>% filter(Region == "O'Higgins")
get_data() %>% filter(Region == "O’Higgins")
get_data() %>% filter(Region == "O’Higgins") %>% tail()
pob <- read.csv("poblacion.csv")
pob
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- 'O’Higgins'
pob
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data$Region[data$Region == "O’Higgins"] <- "O'Higgins"
data <- left_join(data, pob, by = "Region")
data$Fecha <- lubridate::as_date(data$Fecha)
data$Region[data$Region == "Total"] <- "Chile"
data
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- 'O’Higgins'
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data
runApp()
pob$Region[pob$Region == "O'Higgins"] <- "O’Higgins"
runApp()
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- "O’Higgins"
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data
data %>% filter(Region == "Total")
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- "O’Higgins"
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data$Fecha <- lubridate::as_date(data$Fecha)
data$Region[data$Region == "Total"] <- "Chile"
data$Poblacion[is.na(data$Poblacion)] <- total_pob
data$Codigo_Region <- NULL
data <- data %>% mutate(Perc_Vacunado = round(Cantidad / Poblacion * 100, 2))
data <- data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad)))
View(data)
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
df <-get_data()
df
View(df)
sort(unique(df$Dosis))
sort(unique(df$Region))
df %>% filter("O’Higgins")
df %>% filter(Region == "O’Higgins")
df[df$Region == "Chile"]
df[df$Region == "Chile", ]
df[df$Region == "Chile", ]$Poblacion
runApp()
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- "O’Higgins"
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data$Fecha <- lubridate::as_date(data$Fecha)
data$Region[data$Region == "Total"] <- "Chile"
data[data$Region == "Chile", ]$Poblacion <- total_pob
data$Codigo_Region <- NULL
data
data %>% mutate(Perc_Vacunado = round(Cantidad / Poblacion * 100, 2))
data <- data %>% mutate(Perc_Vacunado = round(Cantidad / Poblacion * 100, 2))
data <- data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad)))
View(data)
timeToHerd <- function(data, reg){
data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad))) %>%
mutate(roll_mean = zoo::rollmean(daily, k = 7, fill = NA, align = "right")) %>%
mutate(herd = (Poblacion * 0.7 - Cantidad * 0.5) / (roll_mean * 0.5) ) %>%
filter(Region == reg, Dosis == "Primera") %>%
last() %>%
tail(1)
}
timeToHerd(data, "O’Higgins")
timeToHerd(data, "O'Higgins")
setwd("C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd")
shiny::runApp()
# Calculate time to herd
timeToHerd <- function(data, reg){
data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad))) %>%
mutate(roll_mean = zoo::rollmean(daily, k = 7, fill = NA, align = "right")) %>%
mutate(herd = (Poblacion * 0.7 - Cantidad * 0.5) / (roll_mean * 0.5) ) %>%
filter(Region == reg, Dosis == "Primera") %>%
last() %>%
tail(1)
}
source("get_data.R")
data <- get_data()
data %>% filter(Region == "O’Higgins")
data %>% filter(Region == "O’Higgins") %>% tail()
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- "O’Higgins"
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data$Fecha <- lubridate::as_date(data$Fecha)
data$Region[data$Region == "Total"] <- "Chile"
data[data$Region == "Chile", ]$Poblacion <- total_pob
data$Codigo_Region <- NULL
data <- data %>% mutate(Perc_Vacunado = round(Cantidad / Poblacion * 100, 2))
data <- data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad)))
data %>% filter(Region == "O’Higgins")
library(tidyverse)
library(lubridate)
get_data <- function(){
pob <- read.csv("poblacion.csv")
pob$Region[pob$Region == "O'Higgins"] <- "O’Higgins"
total_pob <- sum(pob$Poblacion)
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data$Fecha <- lubridate::as_date(data$Fecha)
data$Region[data$Region == "Total"] <- "Chile"
data[data$Region == "Chile", ]$Poblacion <- total_pob
data$Codigo_Region <- NULL
data <- data %>% mutate(Perc_Vacunado = round(Cantidad / Poblacion * 100, 2))
data <- data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad)))
return(data)
}
data <- get_data()
data
data %>% filter(Region == "O’Higgins")
runApp()
source("get_data.R")
data <- get_data()
View(data)
left_join()
?left_join
data <- get_data()
data
View(data)
pob <- read.csv("poblacion.csv")
pob
pob[pob$Region == "O'Higgins", "Poblacion"]
data <- get_data()
data
View(data)
source("get_data.R")
data <- get_data()
View(data)
source("get_data.R")
data <- get_data()
View(data)
source("get_data.R")
View(data)
source("get_data.R")
data <- get_data()
View(data)
data$Poblacion[is.na(data$Poblacion)]
data$Poblacion[is.na(data$Poblacion)] <- 999
View(data)
pob <- read.csv("poblacion.csv")
ohipop <- pob[pob$Region == "O'Higgins", "Poblacion"]
ohipop
source("get_data.R")
View(data)
data <- get_data()
View(data)
runApp()
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
get_data()
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
get_data
get_data()
get_data() %>% View()
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
source("get_data.R")
get_data() %>% View()
runApp()
library(readr)
Covid_19_std <- read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19_std.csv")
View(Covid_19_std)
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
source("get_data.R")
get_data() %>% View()
source("get_data.R")
get_data() %>% View()
source("get_data.R")
get_data() %>% View()
read_csv("poblacion.csv", locale = "UTF-8")
read_csv("poblacion.csv")
read_csv("poblacion.csv") %>% Encoding()
read_csv("poblacion.csv") %>% Encoding() <- "UTF-8"
Encoding(read_csv("poblacion.csv")) <- "UTF-8"
Encoding(readr::format_csv(read_csv("poblacion.csv"))) <- "UTF-8"
format_csv("poblacion.csv")
readr::read_csv(file="poblacion.csv", locale = readr::locale(encoding = "latin1"))
readr::read_csv(file="poblacion.csv", locale = readr::locale(encoding = "UTF-8"))
source("get_data.R")
get_data() %>% View()
runApp()
pob <- readr::read_csv(file="poblacion.csv", locale = readr::locale(encoding = "latin1"))
pob
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
get_data() %>% View()
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
get_data() %>% View()
pob <- readr::read_csv(file="poblacion.csv", locale = readr::locale(encoding = "latin1"))
total_pob <- sum(pob$Poblacion)
ohi_pob <- pob[pob$Region == "O'Higgins", "Poblacion"]
url <- "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto76/vacunacion_std.csv"
data <- read.csv(url, header = TRUE, encoding = "UTF-8")
data <- left_join(data, pob, by = "Region")
data$Fecha <- lubridate::as_date(data$Fecha)
data$Region[data$Region == "Total"] <- "Chile"
data[data$Region == "Chile", ]$Poblacion <- total_pob
ata
data
data$Poblacion[is.na(data$Poblacion)]
ohi_pob
data$Poblacion[is.na(data$Poblacion)] <- ohi_pob
data
data$Codigo_Region <- NULL
data <- data %>% mutate(Perc_Vacunado = round(Cantidad / Poblacion * 100, 2))
data <- data %>% group_by(Region, Dosis) %>%
arrange(Fecha) %>%
mutate(daily = c(Cantidad[1], diff(Cantidad)))
data
ohi_pob <- pob[pob$Region == "O'Higgins", "Poblacion"]
ohi_pob
ohi_pob <- pob[pob$Region == "O'Higgins", "Poblacion"][1]
ohi_pob
ohi_pob
ohi_pob %>% pull()
source('C:/Users/User/Desktop/dev/exp/VacAppR/shiny-app-time-to-herd/get_data.R', echo=TRUE)
get_data() %>% View()
runApp()
runApp()
runApp()
runApp()
runApp()
